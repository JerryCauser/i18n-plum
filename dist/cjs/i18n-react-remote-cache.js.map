{
  "version": 3,
  "sources": ["../../src/i18n-react-remote-cache.tsx", "../../src/common/take-value.ts", "../../src/common/fill-template.ts", "../../src/common/convert-dict-to-map.ts", "../../src/i18n.ts", "../../src/i18n-remote.ts", "../../src/i18n-remote-cache.ts"],
  "sourcesContent": ["import type * as React from 'react'\nimport { useContext, createContext, useState, useRef, useEffect } from 'react'\nimport type { CacheI18Options } from './i18n-remote-cache.js'\nimport { I18nRemoteCache } from './i18n-remote-cache.js'\n\ninterface initI18nReactOptions extends CacheI18Options {\n  defaultLocale?: string\n}\n\ninterface I18nReactWrapperOptions {\n  children: React.ReactElement\n  locale?: string | null\n  lngDict?: DictRecord\n}\n\ninterface initialisedI18NReact {\n  I18nContext: React.Context<I18nReact>\n  I18nWrapper: (options: I18nReactWrapperOptions) => React.ReactElement\n  useI18n: () => I18nReact\n}\n\nclass I18nReact extends I18nRemoteCache {}\n\nexport function initI18n (options?: initI18nReactOptions): initialisedI18NReact {\n  options ??= {}\n\n  const {\n    defaultLocale = 'en',\n    path,\n    storage,\n    fetcher,\n    pathCompiler,\n    languageToken\n  } = options\n\n  const i18nHelper = new I18nReact({\n    path,\n    storage,\n    fetcher,\n    pathCompiler,\n    languageToken\n  })\n\n  i18nHelper.setLocale(defaultLocale)\n\n  const I18nContext = createContext<I18nReact>(i18nHelper)\n\n  function I18nWrapper (options: I18nReactWrapperOptions): React.ReactElement {\n    const { children, locale = null, lngDict = null } = options\n\n    const [, setTick] = useState(0)\n    const forceRerender: () => void = () => setTick((tick: number) => tick + 1)\n\n    const firstRender = useRef(true) as { current: boolean }\n\n    useEffect(() => {\n      i18nHelper.on('change', forceRerender)\n\n      return () => {\n        i18nHelper.off(forceRerender)\n      }\n    })\n\n    if (firstRender.current && lngDict !== null && locale !== null) {\n      firstRender.current = false\n      i18nHelper.set(locale, lngDict)\n      i18nHelper.setLocale(locale)\n    }\n\n    return (\n      <I18nContext.Provider value={i18nHelper}>{children}</I18nContext.Provider>\n    )\n  }\n\n  function useI18n (): I18nReact {\n    const i18n = useContext(I18nContext)\n\n    return i18n\n  }\n\n  return {\n    I18nContext,\n    I18nWrapper,\n    useI18n\n  }\n}\n", "/**\n * @param {Nullable<Map<string, any>>} map\n * @param {string | string[]} keys\n * @param {string} [separator]\n * @return {Nullable<string | Function>}\n */\nfunction takeValue (\n  map: Nullable<Map<string, any>>,\n  keys: string | string[],\n  separator: string = '.'\n): Nullable<string | Function> {\n  if (map === null || map === undefined) {\n    return Array.isArray(keys) ? keys.join(separator) : keys\n  }\n  if (typeof keys === 'string') keys = keys.split(separator)\n  if (!Array.isArray(keys) || keys.length === 0) return undefined\n  if (keys.length === 1) return map.get(keys[0])\n\n  let result = map.get(keys[0])\n\n  for (let i = 1; Boolean(result) && i < keys.length; ++i) {\n    result = result.get(keys[i])\n  }\n\n  return result\n}\n\nexport default takeValue\n", "/**\n *\n * @param {string} template\n * @param {DictRecord} params\n * @return {string}\n */\nfunction fillTemplate (template: string, params: DictRecord): string {\n  const regexp = /{{(.*?)}}/g\n\n  // todo \".replace()\" is a fast, but not efficient solution. May be prepare tables as a map functions?\n  return template.replace(regexp, (_, match) => {\n    const keys = match.trim().split('.')\n\n    if (keys.length === 0) return ''\n\n    let result: any = params[keys[0]]\n\n    if (keys.length > 1) {\n      for (let i = 1; Boolean(result) && i < keys.length; ++i) {\n        result = result[keys[i]]\n      }\n    }\n\n    if (typeof result === 'string') return result\n\n    return ''\n  })\n}\n\nexport default fillTemplate\n", "/**\n * Recursively convert object to a map. Inner objects will be converted only if they have Object as the constructor\n * @param {Record<string, any>} dict\n * @return {Map<string, Exclude<any, Record<any, any>>>}\n */\nfunction convertDictToMap (\n  dict: Record<string, any>\n): Map<string, Exclude<any, Record<any, any>>> {\n  const output = new Map()\n\n  for (const key in dict) {\n    if (Object.hasOwn(dict, key)) {\n      const value = dict[key]\n      if (\n        value !== null &&\n        typeof value === 'object' &&\n        value.constructor?.name === 'Object'\n      ) {\n        output.set(key, convertDictToMap(value))\n      } else {\n        output.set(key, value)\n      }\n    }\n  }\n\n  return output\n}\n\nexport default convertDictToMap\n", "import takeValue from './common/take-value.js'\nimport fillTemplate from './common/fill-template.js'\nimport convertDictToMap from './common/convert-dict-to-map.js'\n\nexport interface I18nOptions {\n  locale?: string\n  tables?: TablesRecordType\n  separator?: string\n}\n\nexport type TablesRecordType = Record<string, Nullable<DictRecord>>\nexport type TablesMapType = Map<string, Nullable<MapRecord>>\n\ninterface eventContext {\n  eventName: string\n  once: boolean\n}\n\nexport class I18n {\n  #locale: string\n  #tables: TablesMapType = new Map()\n  #separator: string\n\n  #eventFunctions: Map<Function, eventContext> = new Map()\n\n  constructor (options?: I18nOptions) {\n    this.#tables = convertDictToMap(options?.tables ?? {})\n    this.#locale = options?.locale ?? ''\n    this.#separator = options?.separator ?? '.'\n  }\n\n  get locale (): string {\n    return this.#locale\n  }\n\n  has (lang: string): boolean {\n    return this.#tables.has(lang)\n  }\n\n  set (lang: string, table: DictRecord | MapRecord): void {\n    if (table instanceof Map) this.#tables.set(lang, table)\n    else this.#tables.set(lang, convertDictToMap(table))\n  }\n\n  extend (lang: string, table: DictRecord | MapRecord): void {\n    const record = this.#tables.get(lang)\n\n    if (record === null || record === undefined) {\n      return this.set(lang, table)\n    }\n\n    if (!(table instanceof Map)) table = convertDictToMap(table)\n\n    for (const entry of table) record.set(entry[0], entry[1])\n  }\n\n  delete (lang: string): boolean {\n    return this.#tables.delete(lang)\n  }\n\n  setLocale (lang: string): void {\n    if (this.#locale !== lang) {\n      // ??\n      this.#locale = lang\n      this.emit('change', lang)\n    }\n  }\n\n  get (lang: string): Nullable<MapRecord> {\n    return this.#tables.get(lang)\n  }\n\n  t (key: string | string[], params: DictRecord, lang?: string): string | any {\n    const table = this.get(lang ?? this.#locale)\n    const val = takeValue(table, key, this.#separator) ?? key.toString()\n\n    if (typeof val === 'function') return val(params)\n\n    return fillTemplate(val, params)\n  }\n\n  emit (eventName: string, payload: any): boolean {\n    let output = false\n\n    for (const [fn, context] of this.#eventFunctions) {\n      if (eventName === context.eventName) {\n        setTimeout(() => fn(payload), 0)\n        if (context.once) this.#eventFunctions.delete(fn)\n        output = true\n      }\n    }\n\n    return output\n  }\n\n  on (eventName: string, fn: Function): I18n {\n    this.#eventFunctions.set(fn, { eventName, once: false })\n\n    return this\n  }\n\n  once (eventName: string, fn: Function): I18n {\n    this.#eventFunctions.set(fn, { eventName, once: true })\n\n    return this\n  }\n\n  off (fn: Function): I18n {\n    this.#eventFunctions.delete(fn)\n\n    return this\n  }\n}\n\nexport default I18n\n", "import type { I18nOptions } from './i18n.js'\nimport I18n from './i18n.js'\n\nexport type pathCompiler = (\n  path: string,\n  token: string,\n  language: string\n) => string\nexport type fetcher = (path: string) => Promise<DictRecord | Response | string>\n\nexport interface RemoteI18Options extends I18nOptions {\n  path?: string\n  fetcher?: fetcher\n  languageToken?: string\n  pathCompiler?: pathCompiler\n}\n\nexport class I18nRemote extends I18n {\n  #fetcher: fetcher\n  #path: string\n  #languageToken: string\n  #pathCompiler: pathCompiler\n\n  constructor (options?: RemoteI18Options) {\n    super(options)\n\n    this.#fetcher = options?.fetcher ?? fetch\n    this.#languageToken = options?.languageToken ?? '{{lang}}'\n    this.#path = options?.path ?? `/i18n/${this.#languageToken}.json`\n    this.#pathCompiler =\n      options?.pathCompiler ??\n      function (path, token, language) {\n        return path.replace(token, language)\n      }\n  }\n\n  async loadLocale (langKey: string): Promise<void> {\n    if (!this.has(langKey)) {\n      const path = this.#pathCompiler(this.#path, this.#languageToken, langKey)\n      let res = await this.#fetcher(path)\n\n      if (res instanceof Response) res = await res.json()\n      else if (typeof res === 'string') res = JSON.parse(res)\n\n      this.extend(langKey, res as DictRecord)\n    }\n\n    super.setLocale(langKey)\n  }\n\n  setLocale (lang: string): void {\n    this.loadLocale(lang).catch(console.error)\n  }\n}\n\nexport default I18nRemote\n", "import type { RemoteI18Options } from './i18n-remote.js'\nimport I18nRemote from './i18n-remote.js'\n\nexport interface I18nCacheStorage {\n  set: (key: any, value: DictRecord | string) => void\n  get: (key: any) => DictRecord | string | null\n}\n\nexport interface CacheI18Options extends RemoteI18Options {\n  storage?: I18nCacheStorage\n}\n\nexport class I18nRemoteCache extends I18nRemote {\n  #storage: I18nCacheStorage\n\n  constructor (options?: CacheI18Options) {\n    super(options)\n\n    this.#storage = options?.storage ?? new Map()\n  }\n\n  async loadLocale (lang: string): Promise<void> {\n    if (!this.has(lang)) {\n      let cachedTable = this.#storage.get(lang)\n      if (typeof cachedTable === 'string') {\n        cachedTable = JSON.parse(cachedTable) as DictRecord\n      }\n\n      if (cachedTable !== null) this.extend(lang, cachedTable)\n    }\n\n    return await super.loadLocale(lang)\n  }\n}\n\nexport default I18nRemoteCache\n"],
  "mappings": "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",
  "names": ["i18n_react_remote_cache_exports", "__export", "initI18n", "__toCommonJS", "import_react", "takeValue", "map", "keys", "separator", "result", "i", "take_value_default", "fillTemplate", "template", "params", "regexp", "_", "match", "keys", "result", "i", "fill_template_default", "convertDictToMap", "dict", "_a", "output", "key", "value", "convert_dict_to_map_default", "I18n", "#locale", "#tables", "#separator", "#eventFunctions", "options", "convert_dict_to_map_default", "lang", "table", "record", "entry", "key", "params", "val", "take_value_default", "fill_template_default", "eventName", "payload", "output", "fn", "context", "i18n_default", "I18nRemote", "i18n_default", "#fetcher", "#path", "#languageToken", "#pathCompiler", "options", "path", "token", "language", "langKey", "res", "lang", "i18n_remote_default", "I18nRemoteCache", "i18n_remote_default", "#storage", "options", "lang", "cachedTable", "I18nReact", "I18nRemoteCache", "initI18n", "options", "defaultLocale", "path", "storage", "fetcher", "pathCompiler", "languageToken", "i18nHelper", "I18nContext", "I18nWrapper", "children", "locale", "lngDict", "setTick", "forceRerender", "tick", "firstRender", "useI18n"]
}
